This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/
  workflows/
    ci.yml
src/
  pedalboard_pluginary/
    resources/
      default_ignores.json
    scanners/
      __init__.py
      au_scanner.py
      vst3_scanner.py
    __init__.py
    __main__.py
    core.py
    data.py
    models.py
    scanner.py
    utils.py
tests/
  scanners/
    __init__.py
    test_au_scanner.py
    test_vst3_scanner.py
  test_cli.py
  test_data.py
  test_utils.py
.coveragerc
.gitignore
.isort.cfg
.pre-commit-config.yaml
AUTHORS.md
build.sh
CHANGELOG.md
LICENSE.txt
PLAN.md
pyproject.toml
README.md
TODO.md
tox.ini
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/pedalboard_pluginary/resources/default_ignores.json">
[
    "aufx/ANIMATE",
    "aufx/AudioDSP",
    "aufx/CoreAudio",
    "aufx/Dynamics",
    "aufx/iZNectar4Auto-LevelAUHook",
    "aufx/iZNeutron4AUHook",
    "aufx/iZNeutron4CompressorAUHook",
    "aufx/iZNeutron4EqualizerAUHook",
    "aufx/iZNeutron4ExciterAUHook",
    "aufx/iZNeutron4GateAUHook",
    "aufx/iZNeutron4SculptorAUHook",
    "aufx/iZNeutron4TransientShaperAUHook",
    "aufx/iZNeutron4UnmaskAUHook",
    "aufx/iZRX10ConnectAUHook",
    "aufx/iZRelayAUHook",
    "aufx/smartEQ3",
    "aufx/smartcomp2",
    "aufx/smartgate",
    "aufx/unknown URL",
    "vst3/RX 10 Connect",
    "vst3/RX 10 Repair Assistant",
    "vst3/smartEQ3"
]
</file>

<file path="src/pedalboard_pluginary/scanners/__init__.py">
# pedalboard_pluginary/scanners/__init__.py

# This file makes Python treat the `scanners` directory as a package.

# Optionally, you can import specific classes or functions here to make them
# available at the package level, e.g.:
# from .au_scanner import AUScanner
# from .vst3_scanner import VST3Scanner

# For now, it will be kept empty.
</file>

<file path="src/pedalboard_pluginary/models.py">
# pedalboard_pluginary/models.py
"""
Dataclasses for representing plugin information.
"""
from dataclasses import dataclass, field
from pathlib import Path
from typing import Union, Dict, Optional, Any

# ParameterValue is what we store (after conversion from pedalboard's raw param value)
ParameterValue = Union[float, bool, str]

@dataclass
class PluginParameter:
    """Represents a single parameter of a plugin."""
    name: str
    value: ParameterValue
    # Optional: Add other attributes like min_value, max_value, string_value, etc.
    # if Pedalboard consistently provides them and they are useful to store.
    # For now, keeping it simple with just name and current (default) value.
    # raw_pedalboard_value: Any # Could store the original pedalboard value if needed for debugging

@dataclass
class PluginInfo:
    """Represents a scanned audio plugin."""
    # Unique key for this plugin, e.g., "vst3/FabFilter Pro-Q 3" or "aufx/ChannelEQ"
    # This key might be different from `name` if a file contains multiple plugins or
    # if the user-facing name has characters not suitable for a key.
    # This will be the key in the main dictionary of plugins.
    id: str

    name: str # The display name of the plugin
    path: str # Path to the plugin file or bundle (as string for JSON serialization)
    filename: str # Filename of the plugin (e.g., "FabFilter Pro-Q 3.vst3")
    plugin_type: str # "vst3" or "aufx"

    # Parameters: dict where key is param name, value is PluginParameter object
    parameters: Dict[str, PluginParameter] = field(default_factory=dict)

    manufacturer: Optional[str] = None # Optional: Plugin manufacturer name

    # Optional: If a plugin file (e.g. VST3) can contain multiple uniquely identifiable
    # plugins, this field could store the specific name used to load this plugin
    # from the file, if different from the main `name`.
    # E.g. `pedalboard.load_plugin(path, plugin_name=name_in_file)`
    name_in_file: Optional[str] = None

    def __post_init__(self):
        # Ensure path is stored as a string for easier JSON serialization
        if isinstance(self.path, Path):
            self.path = str(self.path)

    # Consider adding methods for to_dict/from_dict if needed for complex serialization,
    # though dataclasses.asdict and direct instantiation usually suffice.

# Example usage:
# if __name__ == "__main__":
#     eq_param = PluginParameter(name="Frequency", value=1000.0)
#     gain_param = PluginParameter(name="Gain", value=0.0)
#     bypass_param = PluginParameter(name="Bypass", value=False)

#     example_plugin = PluginInfo(
#         id="vst3/AwesomeEQ",
#         name="Awesome EQ",
#         path="/path/to/AwesomeEQ.vst3",
#         filename="AwesomeEQ.vst3",
#         plugin_type="vst3",
#         parameters={
#             "Frequency": eq_param,
#             "Gain": gain_param,
#             "Bypass": bypass_param
#         },
#         manufacturer="MyPluginCompany"
#     )
#     import json
#     from dataclasses import asdict
#     print(json.dumps(asdict(example_plugin), indent=2))
</file>

<file path="tests/scanners/__init__.py">
# tests/scanners/__init__.py
# This file makes Python treat the `tests/scanners` directory as a package.
</file>

<file path="tests/scanners/test_au_scanner.py">
# tests/scanners/test_au_scanner.py
import os
import platform
import pytest
from pathlib import Path
from unittest.mock import patch, MagicMock

from pedalboard_pluginary.scanners.au_scanner import AUScanner

# Sample auval output
AUVAL_OUTPUT_VALID = """
 Westwood AU Test
--------------------------------------------------
AUVALTOOL Discount AU
--------------------------------------------------
PLAYER version 2.0.13 (build 17)
--------------------------------------------------
VALIDATING AUDIO UNIT: 'aufx' - 'dely' - 'appl'
--------------------------------------------------
Manufacturer String: Apple
AudioUnit Name: AUDelay
Component Version: 1.7.0
Component Bundle Path: /Library/Audio/Plug-Ins/Components/AUDelay.component
Component AU Path: /Library/Audio/Plug-Ins/Components/AUDelay.component/Contents/MacOS/AUDelay

* * PASS
--------------------------------------------------
VALIDATING AUDIO UNIT: 'aufx' - 'mcmp' - 'appl'
--------------------------------------------------
Manufacturer String: Apple
AudioUnit Name: AUMultibandCompressor
Component Version: 1.7.0
Component Bundle Path: /Library/Audio/Plug-Ins/Components/AUMultibandCompressor.component
Component AU Path: /Library/Audio/Plug-Ins/Components/AUMultibandCompressor.component/Contents/MacOS/AUMultibandCompressor

* * PASS
--------------------------------------------------
VALIDATING AUDIO UNIT: 'aumf' - 'dls ' - 'appl'
--------------------------------------------------
Manufacturer String: Apple
AudioUnit Name: DLSMusicDevice
Component Version: 1.7.0
Component Bundle Path: /Library/Audio/Plug-Ins/Components/DLSMusicDevice.component
Component AU Path: /Library/Audio/Plug-Ins/Components/DLSMusicDevice.component/Contents/MacOS/DLSMusicDevice

* * PASS
--------------------------------------------------
TESTING OPEN TIMES:
COLD:
Time to open AudioUnit:      21.112 ms
WARM:
Time to open AudioUnit:      0.042  ms
This AudioUnit is a version 3 implementation.
FIRST TIME:
FATAL ERROR: Initialize: result: -50


--------------------------------------------------
AU VALIDATION SUCCEEDED.
--------------------------------------------------
"""

AUVAL_OUTPUT_GARBAGE_URL = """
 Westwood AU Test
--------------------------------------------------
VALIDATING AUDIO UNIT: 'aufx' - 'xxxx' - 'test'
--------------------------------------------------
Manufacturer String: Test Inc
AudioUnit Name: BadURLPlugin
Component Version: 1.0.0
Component Bundle Path: /path/to/plugin with spaces.component
Component AU Path: (null)

* * PASS
--------------------------------------------------
AU VALIDATION SUCCEEDED.
--------------------------------------------------
"""


@pytest.fixture
def au_scanner_instance():
    return AUScanner(ignores=set())

@pytest.fixture
def au_scanner_with_ignores_instance():
    return AUScanner(ignores={"aufx/DLSMusicDevice"}) # Key is type/stem

@patch('platform.system', return_value='Darwin') # Assume macOS for these tests
class TestAUScanner:

    @patch('subprocess.run')
    def test_list_aufx_plugins_raw_success(self, mock_subprocess_run, au_scanner_instance):
        mock_process = MagicMock()
        mock_process.stdout = AUVAL_OUTPUT_VALID
        mock_subprocess_run.return_value = mock_process

        lines = au_scanner_instance._list_aufx_plugins_raw()
        assert len(lines) > 0
        assert "AUDelay" in AUVAL_OUTPUT_VALID
        mock_subprocess_run.assert_called_once_with(
            ["auval", "-l"],
            stdout=subprocess.PIPE,
            stderr=subprocess.DEVNULL,
            text=True,
            check=True,
        )

    @patch('subprocess.run', side_effect=FileNotFoundError("auval not found"))
    def test_list_aufx_plugins_raw_auval_not_found(self, mock_subprocess_run, au_scanner_instance):
        lines = au_scanner_instance._list_aufx_plugins_raw()
        assert lines == []

    @patch('subprocess.run')
    def test_find_plugin_files_valid_output(self, mock_subprocess_run, au_scanner_instance):
        mock_process = MagicMock()
        mock_process.stdout = AUVAL_OUTPUT_VALID
        mock_subprocess_run.return_value = mock_process

        # Mock Path.resolve() and Path.exists() for paths found by auval
        with patch.object(Path, 'resolve') as mock_resolve, \
             patch.object(Path, 'exists', return_value=True) as mock_exists:

            # Make resolve return a Path object that can be further manipulated if needed
            # and also has an 'exists' method.
            def side_effect_resolve(*args, **kwargs):
                # The input to resolve is the path string from auval output
                # e.g., Path("/Library/Audio/Plug-Ins/Components/AUDelay.component")
                # We want it to return itself basically, but as a mock if needed for exists()
                p = Path(*args) # Reconstruct the original path
                # Mock the exists for this specific path if needed, though global mock_exists might cover it
                # For bundle path logic, ensure suffix is checked on original path.
                return p
            mock_resolve.side_effect = side_effect_resolve

            plugin_files = au_scanner_instance.find_plugin_files()

            assert len(plugin_files) == 3 # AUDelay, AUMultibandCompressor, DLSMusicDevice
            expected_paths = [
                Path("/Library/Audio/Plug-Ins/Components/AUDelay.component"),
                Path("/Library/Audio/Plug-Ins/Components/AUMultibandCompressor.component"),
                Path("/Library/Audio/Plug-Ins/Components/DLSMusicDevice.component"),
            ]
            for p in expected_paths:
                assert p.resolve() in plugin_files # Comparing resolved paths

    @patch('subprocess.run')
    def test_find_plugin_files_with_ignores(self, mock_subprocess_run, au_scanner_with_ignores_instance):
        mock_process = MagicMock()
        mock_process.stdout = AUVAL_OUTPUT_VALID
        mock_subprocess_run.return_value = mock_process

        with patch.object(Path, 'resolve', side_effect=lambda p: Path(p)), \
             patch.object(Path, 'exists', return_value=True):
            plugin_files = au_scanner_with_ignores_instance.find_plugin_files()

            # DLSMusicDevice should be ignored
            assert len(plugin_files) == 2
            ignored_path = Path("/Library/Audio/Plug-Ins/Components/DLSMusicDevice.component").resolve()
            assert ignored_path not in plugin_files
            delay_path = Path("/Library/Audio/Plug-Ins/Components/AUDelay.component").resolve()
            assert delay_path in plugin_files


    @patch('subprocess.run')
    def test_find_plugin_files_garbage_url(self, mock_subprocess_run, au_scanner_instance):
        mock_process = MagicMock()
        mock_process.stdout = AUVAL_OUTPUT_GARBAGE_URL # Contains (null) URL
        mock_subprocess_run.return_value = mock_process

        with patch.object(Path, 'resolve', side_effect=lambda p: Path(p) if p else None), \
             patch.object(Path, 'exists', return_value=True):
            plugin_files = au_scanner_instance.find_plugin_files()
            assert len(plugin_files) == 0 # Should skip the one with (null) URL

    @patch('platform.system', return_value='Linux') # Test non-Darwin platform
    def test_scanner_on_non_macos(self, mock_platform_system_linux, au_scanner_instance):
        assert au_scanner_instance._list_aufx_plugins_raw() == []
        assert au_scanner_instance.find_plugin_files() == []

    @patch('subprocess.run')
    def test_find_plugin_files_with_specific_paths_filter(self, mock_subprocess_run, au_scanner_instance):
        mock_process = MagicMock()
        mock_process.stdout = AUVAL_OUTPUT_VALID
        mock_subprocess_run.return_value = mock_process

        # User wants to check only AUDelay
        specific_paths_to_check = [Path("/Library/Audio/Plug-Ins/Components/AUDelay.component")]

        with patch.object(Path, 'resolve', side_effect=lambda p: Path(p)), \
             patch.object(Path, 'exists', return_value=True):
            plugin_files = au_scanner_instance.find_plugin_files(plugin_paths=specific_paths_to_check)

            assert len(plugin_files) == 1
            assert Path("/Library/Audio/Plug-Ins/Components/AUDelay.component").resolve() in plugin_files

    # Test for bundle path resolution logic
    # This requires more intricate mocking of Path objects if we don't want to rely on filesystem
    @patch('subprocess.run')
    def test_bundle_path_resolution(self, mock_subprocess_run, au_scanner_instance):
        # Simulate auval output where path is deep inside the bundle
        deep_path_auval_output = """
        VALIDATING AUDIO UNIT: 'aufx' - 'test' - 'tstc'
        --------------------------------------------------
        Manufacturer String: TestCompany
        AudioUnit Name: DeepTestPlugin
        Component Version: 1.0.0
        Component Bundle Path: /Some/Path/DeepTestPlugin.component/Contents/MacOS/DeepTestPlugin
        Component AU Path: /Some/Path/DeepTestPlugin.component/Contents/MacOS/DeepTestPlugin
        * * PASS
        --------------------------------------------------
        AU VALIDATION SUCCEEDED.
        --------------------------------------------------
        """
        mock_process = MagicMock()
        mock_process.stdout = deep_path_auval_output
        mock_subprocess_run.return_value = mock_process

        # We need to mock Path behavior for suffix and parent
        # The Path object created from the string should behave as expected.
        # No complex mocking needed if Path objects work as standard for these attributes.
        # We only need to ensure Path.resolve and Path.exists are controlled.

        with patch.object(Path, 'resolve', side_effect=lambda p: Path(p)), \
             patch.object(Path, 'exists', return_value=True):

            plugin_files = au_scanner_instance.find_plugin_files()

            assert len(plugin_files) == 1
            # The scanner should correctly identify the .component bundle path
            expected_bundle_path = Path("/Some/Path/DeepTestPlugin.component").resolve()
            assert expected_bundle_path in plugin_files

# TODO: Add tests for error conditions in auval (e.g., CalledProcessError)
# TODO: Add tests for when Path.resolve() or other Path operations raise exceptions
# (though these are less likely for valid path strings)
</file>

<file path="tests/test_cli.py">
# tests/test_cli.py
import os
import subprocess
import json
import yaml
from pathlib import Path
from unittest.mock import patch, MagicMock
import pytest

from pedalboard_pluginary.data import APP_NAME, PLUGINS_CACHE_FILENAME_BASE, get_cache_path

# Helper to get the cache file path for plugins
def get_plugins_cache_file():
    return get_cache_path(PLUGINS_CACHE_FILENAME_BASE)

@pytest.fixture(autouse=True)
def manage_plugin_cache():
    """Fixture to ensure plugin cache is handled before and after tests."""
    cache_file = get_plugins_cache_file()
    original_content = None

    if cache_file.exists():
        original_content = cache_file.read_text()
        cache_file.unlink() # Remove before test

    yield # Test runs here

    # Cleanup: remove cache file created by test, or restore original
    if cache_file.exists():
        cache_file.unlink()
    if original_content:
        # Ensure parent directory exists before writing back
        cache_file.parent.mkdir(parents=True, exist_ok=True)
        cache_file.write_text(original_content)


# Mocked data for PedalboardScanner.scan_all_plugins and load_json_file
# This data will be "written" by the mocked scan and "read" by list/json/yaml
MOCK_PLUGIN_DATA = {
    "vst3/MockSynth": {
        "id": "vst3/MockSynth",
        "name": "MockSynth",
        "path": "/fake/path/to/MockSynth.vst3",
        "filename": "MockSynth.vst3",
        "plugin_type": "vst3",
        "parameters": {
            "Volume": {"name": "Volume", "value": 0.75},
            "Pan": {"name": "Pan", "value": 0.0}
        },
        "manufacturer": "FakePlugins",
        "name_in_file": "MockSynth"
    },
    "aufx/MockEffect": {
        "id": "aufx/MockEffect",
        "name": "MockEffect",
        "path": "/fake/path/to/MockEffect.component",
        "filename": "MockEffect.component",
        "plugin_type": "aufx",
        "parameters": {
            "Wet/Dry": {"name": "Wet/Dry", "value": 0.5}
        },
        "manufacturer": "FakeAudio",
        "name_in_file": "MockEffect"
    }
}

# This mock will replace the actual PedalboardScanner instance or its methods
@patch('pedalboard_pluginary.scanner.PedalboardScanner.scan_all_plugins')
@patch('pedalboard_pluginary.scanner.PedalboardScanner.update_scan') # Also mock update_scan
@patch('pedalboard_pluginary.scanner.PedalboardScanner.save_plugins') # Mock save_plugins
@patch('pedalboard_pluginary.core.PedalboardPluginary.load_data') # Mock load_data in core
def run_cli_command(
    cli_args_list,
    mock_core_load_data,
    mock_scanner_save_plugins,
    mock_scanner_update_scan,
    mock_scanner_scan_all,
    expected_exit_code=0
):
    """Helper to run CLI commands and capture output."""

    # If scan or update is called, make them "create" the mock cache file
    def side_effect_scan_or_update(*args, **kwargs):
        cache_file = get_plugins_cache_file()
        cache_file.parent.mkdir(parents=True, exist_ok=True)
        with open(cache_file, 'w') as f:
            json.dump(MOCK_PLUGIN_DATA, f, indent=4)
        # The actual scan methods in PedalboardScanner don't return anything.
        # They modify self.plugins and then call self.save_plugins.
        # We've mocked save_plugins separately.

    mock_scanner_scan_all.side_effect = side_effect_scan_or_update
    mock_scanner_update_scan.side_effect = side_effect_scan_or_update

    # Mock load_data to set the plugins attribute on an instance if needed,
    # or simply prevent it from trying to load a real file during list commands
    # if scan hasn't run.
    # For 'list', 'json', 'yaml', the PedalboardPluginary instance will try to load.
    # We can patch load_json_file used by PedalboardPluginary.load_data

    base_command = ["pbpluginary"]
    full_command = base_command + cli_args_list

    try:
        result = subprocess.run(full_command, capture_output=True, text=True, check=False)
        if result.returncode != expected_exit_code:
            print("STDOUT:", result.stdout)
            print("STDERR:", result.stderr)
        assert result.returncode == expected_exit_code
        return result
    except FileNotFoundError:
        pytest.fail("pbpluginary command not found. Ensure it's installed and in PATH for testing.")


# Test 'scan' command
# Patching at the source of where PedalboardScanner is instantiated or used by CLI
@patch('pedalboard_pluginary.__main__.PedalboardScanner')
def test_cli_scan(MockScannerConstructor):
    # Mock the instance methods that would be called
    mock_scanner_instance = MockScannerConstructor.return_value
    mock_scanner_instance.rescan.return_value = None # rescan calls full_scan which calls scan_all_plugins

    # We need rescan (which is an alias for full_scan) to effectively create the cache
    # by having its underlying scan_all_plugins call write the MOCK_PLUGIN_DATA
    def mock_rescan_writes_cache(*args, **kwargs):
        cache_file = get_plugins_cache_file()
        cache_file.parent.mkdir(parents=True, exist_ok=True)
        with open(cache_file, 'w') as f:
            json.dump(MOCK_PLUGIN_DATA, f, indent=4)
    mock_scanner_instance.rescan.side_effect = mock_rescan_writes_cache

    result = run_cli_command(["scan"]) # Uses the patches from run_cli_command's decorators

    # Check that the cache file was created with mock data
    cache_file = get_plugins_cache_file()
    assert cache_file.exists()
    with open(cache_file, 'r') as f:
        data_from_cache = json.load(f)
    assert data_from_cache == MOCK_PLUGIN_DATA

    # Check if scan method on the instance was called
    mock_scanner_instance.rescan.assert_called_once()


# Test 'list' command (implicitly tests JSON output)
# For list, we need to ensure that the cache exists or that PedalboardPluginary can load it.
# The manage_plugin_cache fixture helps here.
# We also need to control what PedalboardPluginary.load_data does.
@patch('pedalboard_pluginary.data.load_json_file') # Patch where load_json_file is defined
def test_cli_list(mock_load_json, capsys):
    # Setup: Ensure a cache file with MOCK_PLUGIN_DATA exists for 'list' to read
    cache_file = get_plugins_cache_file()
    cache_file.parent.mkdir(parents=True, exist_ok=True)
    with open(cache_file, 'w') as f:
        json.dump(MOCK_PLUGIN_DATA, f, indent=4)

    # Configure the mock for load_json_file used by PedalboardPluginary
    # It should return the MOCK_PLUGIN_DATA when the specific plugins cache path is requested
    def side_effect_load_json(path_arg):
        if path_arg == cache_file:
            # Return raw dict, PedalboardPluginary.load_data will handle reconstruction
            return MOCK_PLUGIN_DATA
        return {} # Default for other calls
    mock_load_json.side_effect = side_effect_load_json

    # Run the 'list' command
    # Using direct function call to avoid subprocess complexity with stdout/stderr and fire's display hook
    from pedalboard_pluginary.__main__ import list_json_cli

    # Fire's Display hook is tricky to test with subprocess.run, so call directly.
    # list_json_cli returns a string.
    # We need to ensure that when `pbpluginary list` is run, this function is called
    # and its output (which is JSON string) is printed.
    # For simplicity here, just test the function that `fire` would call.

    # To test the actual CLI output, we need to let pbpluginary run as subprocess
    # and capture stdout. This means not mocking PedalboardPluginary or its load_data directly here
    # but ensuring the underlying data.load_json_file behaves as expected due to the patch.

    result = subprocess.run(["pbpluginary", "list"], capture_output=True, text=True, check=True)

    # The output should be the MOCK_PLUGIN_DATA formatted as JSON
    # Fire wraps output, so it might not be exact JSON string if printed line-by-line.
    # The default 'list' command in __main__.py calls bdict().to_json() and fire prints it.
    # Let's parse the stdout.
    try:
        output_data = json.loads(result.stdout)
        assert output_data == MOCK_PLUGIN_DATA
    except json.JSONDecodeError:
        pytest.fail(f"CLI output was not valid JSON. Output:\n{result.stdout}")


# Test 'json' command (should be identical to 'list')
@patch('pedalboard_pluginary.data.load_json_file')
def test_cli_json_output(mock_load_json_for_json_cmd, capsys):
    cache_file = get_plugins_cache_file()
    cache_file.parent.mkdir(parents=True, exist_ok=True)
    with open(cache_file, 'w') as f:
        json.dump(MOCK_PLUGIN_DATA, f, indent=4)

    def side_effect_load_json(path_arg):
        if path_arg == cache_file:
            return MOCK_PLUGIN_DATA
        return {}
    mock_load_json_for_json_cmd.side_effect = side_effect_load_json

    result = subprocess.run(["pbpluginary", "json"], capture_output=True, text=True, check=True)
    try:
        output_data = json.loads(result.stdout)
        assert output_data == MOCK_PLUGIN_DATA
    except json.JSONDecodeError:
        pytest.fail(f"CLI output for 'json' was not valid JSON. Output:\n{result.stdout}")


# Test 'yaml' command
@patch('pedalboard_pluginary.data.load_json_file')
def test_cli_yaml_output(mock_load_json_for_yaml_cmd, capsys):
    cache_file = get_plugins_cache_file()
    cache_file.parent.mkdir(parents=True, exist_ok=True)
    with open(cache_file, 'w') as f:
        json.dump(MOCK_PLUGIN_DATA, f, indent=4)

    def side_effect_load_json(path_arg):
        if path_arg == cache_file:
            return MOCK_PLUGIN_DATA
        return {}
    mock_load_json_for_yaml_cmd.side_effect = side_effect_load_json

    result = subprocess.run(["pbpluginary", "yaml"], capture_output=True, text=True, check=True)
    try:
        # python-benedict's to_yaml output might have specific formatting.
        # For robustness, parse it back and compare with original data.
        output_data = yaml.safe_load(result.stdout)
        # YAML load might produce slightly different types (e.g. list for dict items sometimes)
        # A direct comparison MOCK_PLUGIN_DATA might be tricky if numbers are float vs int.
        # For now, let's assume benedict produces standard YAML that converts back cleanly.
        assert json.dumps(output_data, sort_keys=True) == json.dumps(MOCK_PLUGIN_DATA, sort_keys=True)
    except yaml.YAMLError:
        pytest.fail(f"CLI output for 'yaml' was not valid YAML. Output:\n{result.stdout}")
    except Exception as e:
        pytest.fail(f"Error comparing YAML output: {e}. Output:\n{result.stdout}")


# Test 'update' command
@patch('pedalboard_pluginary.__main__.PedalboardScanner')
def test_cli_update(MockScannerConstructorForUpdate):
    mock_scanner_instance = MockScannerConstructorForUpdate.return_value

    # Simulate that update_scan effectively writes the cache
    def mock_update_scan_writes_cache(*args, **kwargs):
        cache_file = get_plugins_cache_file()
        cache_file.parent.mkdir(parents=True, exist_ok=True)
        # Update might add to existing data or rescan if no cache.
        # For this test, assume it behaves like scan if no cache.
        with open(cache_file, 'w') as f:
            json.dump(MOCK_PLUGIN_DATA, f, indent=4) # For simplicity, same as scan
    mock_scanner_instance.update_scan.side_effect = mock_update_scan_writes_cache

    result = run_cli_command(["update"]) # Uses patches from run_cli_command

    cache_file = get_plugins_cache_file()
    assert cache_file.exists()
    with open(cache_file, 'r') as f:
        data_from_cache = json.load(f)
    assert data_from_cache == MOCK_PLUGIN_DATA # Assuming update wrote this

    mock_scanner_instance.update_scan.assert_called_once()


# TODO: Test for verbose logging options (--verbose=1, --verbose=2)
# TODO: Test for --extra-folders option with scan and update
# TODO: Test scan/update when cache already exists (for update's diff logic, though that's scanner internal)
# TODO: Test error conditions (e.g., unparseable cache, permissions issues - harder to mock)

# Note: The run_cli_command helper and its patches are quite broad.
# For more targeted tests, especially for 'list', 'json', 'yaml',
# it might be better to directly call the CLI functions from __main__.py
# and mock their dependencies (like PedalboardPluginary instance) instead of using subprocess.
# However, subprocess tests the actual command-line invocation.
# The current `test_cli_list` and `test_cli_json_output`, `test_cli_yaml_output`
# have been changed to use subprocess.run directly.
</file>

<file path="tests/test_utils.py">
import pytest
from pedalboard_pluginary.utils import ensure_folder
from pathlib import Path

def test_ensure_folder(tmp_path):
    test_folder = tmp_path / "test_folder"
    ensure_folder(test_folder)
    assert test_folder.exists()
</file>

<file path=".coveragerc">
# .coveragerc to control coverage.py
[run]
branch = True
source = pedalboard_pluginary
# omit = bad_file.py

[paths]
source =
    src/
    */site-packages/

[report]
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:
</file>

<file path=".isort.cfg">
[settings]
profile = black
known_first_party = pedalboard_pluginary
</file>

<file path="build.sh">
#!/usr/bin/env bash
# this_file: build.sh

set -e # Exit on error

echo "🧹 Cleaning up previous builds..."
rm -rf build/ dist/ *.egg-info .eggs/ .pytest_cache/ .coverage .tox/ .mypy_cache/

echo "🔍 Running type checks with mypy..."
python -m mypy src/pedalboard_pluginary

echo "�� Running tests..."
PYTHONPATH=src pytest tests/ -p no:flake8 -p no:briefcase

echo "📦 Building package..."
python -m build

echo "🚀 Installing locally..."
pip install -e .

echo "✨ Build and installation complete!"
</file>

<file path="CHANGELOG.md">
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

### Added
- Created PLAN.md for implementation roadmap
- Created TODO.md for task tracking
- Created CHANGELOG.md for version history

### Changed
- Refactored scanner architecture to use modular scanner classes
- Improved type annotations throughout the codebase

### Fixed
- Fixed duplicate imports in scanner.py
- Fixed duplicate full_scan method definitions
- Fixed missing attributes in PedalboardScanner class (ignores, ignores_path)
- Fixed incorrect method calls to scanner instances
- Fixed parameter order in save_json_file calls
- Fixed VST3Scanner inheritance issue (removed BaseScanner dependency)
- Fixed missing scan_plugin method implementations in scanner classes
- Implemented proper plugin parameter extraction using pedalboard API
- Added progress bars using tqdm for plugin scanning
- Enhanced AU scanner with fallback to auval for metadata extraction
- Improved VST3 scanner with manufacturer and display name extraction

### Removed
- Removed obsolete scan_aufx_plugins and scan_vst3_plugins methods
- Removed redundant BaseScanner class definition in scanner.py
- Removed unnecessary type aliases in scanner modules

### Enhanced
- Rewrote VST3Scanner to properly load plugins and extract parameters
- Rewrote AUScanner to properly load plugins with fallback to auval
- Added proper plugin metadata extraction (manufacturer, display name)
- Improved plugin path discovery for both VST3 and AU formats

## [1.1.0] - Previous Release

### Added
- Added `update` CLI command which only scans plugins that aren't cached yet
- Added `json` and `yaml` CLI commands

### Changed
- Additional refactorings

## [1.0.0] - Initial Release

### Added
- Initial release with basic scanning and listing of both VST-3 and AU plugins
- Command-line interface for easy interaction
- Support for macOS and Windows (Windows untested)
- Plugin parameter extraction with default values
- JSON cache file for plugin information
- Blacklist functionality for problematic plugins
</file>

<file path="LICENSE.txt">
Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "{}"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright {yyyy} {name of copyright owner}

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
</file>

<file path="PLAN.md">
# Pedalboard Pluginary - Implementation Plan

## Overview
This document outlines the implementation plan for improving Pedalboard Pluginary, a Python package that scans and catalogs VST-3 and AU audio plugins.

## Project Goals
1. Improve type safety and code quality
2. Add async support for better performance
3. Implement progress callbacks for long-running operations
4. Add caching mechanism for scan results
5. Enhance error handling and resilience
6. Update documentation and build tooling

## Current State Analysis
- The project has a solid foundation with scanner classes for VST3 and AU plugins
- Uses Pedalboard library for plugin loading
- Has basic CLI interface using Fire
- Includes test coverage with pytest
- Has models.py with typed data structures (PluginInfo, PluginParameter)
- Has duplicate code and inconsistencies in scanner.py

## Planned Improvements

### Phase 1: Code Cleanup and Consistency
- [ ] Fix duplicate imports and class definitions in scanner.py
- [ ] Remove redundant scanner methods (scan_aufx_plugins, scan_vst3_plugins)
- [ ] Ensure consistent use of typed models throughout
- [ ] Fix mypy type checking issues

### Phase 2: Enhanced Type Safety
- [ ] Add proper type annotations for all functions
- [ ] Create Protocol definitions for plugin interfaces
- [ ] Add runtime type validation for external data
- [ ] Ensure all pedalboard imports have proper type ignores

### Phase 3: Async Support
- [ ] Convert scanner classes to support async operations
- [ ] Add asyncio-based concurrent plugin scanning
- [ ] Implement async file I/O for cache operations
- [ ] Add CLI support for async operations

### Phase 4: Progress and Callbacks
- [ ] Add progress callback interface to scanners
- [ ] Implement tqdm progress bars for CLI
- [ ] Add programmatic progress callbacks for library usage
- [ ] Support cancellation of long-running scans

### Phase 5: Caching Improvements
- [ ] Implement proper cache invalidation strategy
- [ ] Add cache versioning for compatibility
- [ ] Support partial cache updates
- [ ] Add cache statistics and management commands

### Phase 6: Error Handling
- [ ] Create custom exception hierarchy
- [ ] Add retry logic for transient failures
- [ ] Improve error messages and logging
- [ ] Add plugin validation before caching

### Phase 7: Documentation and Tooling
- [ ] Update README with new features
- [ ] Add API documentation with examples
- [ ] Configure GitHub Actions for CI/CD
- [ ] Set up proper code coverage reporting
- [ ] Add pre-commit hooks for code quality

## Technical Decisions
1. Keep Python 3.9 as minimum version for wider compatibility
2. Use asyncio for async support (not trio or other alternatives)
3. Maintain backward compatibility with existing API
4. Use pydantic for enhanced data validation (optional dependency)
5. Keep Fire for CLI but add proper argument parsing

## Success Criteria
- All tests pass with 90%+ coverage
- Type checking passes with strict mypy settings
- Documentation is complete and accurate
- Performance improves for large plugin libraries
- Error handling is robust and informative
</file>

<file path="TODO.md">
# Pedalboard Pluginary - TODO List

## High Priority

### Code Cleanup
- [x] Create PLAN.md and TODO.md files
- [ ] Fix duplicate imports in scanner.py
- [ ] Remove redundant BaseScanner class definition
- [ ] Fix duplicate full_scan method in PedalboardScanner
- [ ] Remove obsolete scan_aufx_plugins and scan_vst3_plugins methods
- [ ] Clean up imports and organize them properly

### Type Safety
- [ ] Fix mypy errors in scanner.py
- [ ] Add proper type annotations for pedalboard imports
- [ ] Fix PedalboardPluginType alias usage
- [ ] Add Protocol definitions for plugin interfaces

### Critical Bugs
- [ ] Fix scanner initialization (missing ignores attribute)
- [ ] Fix scanner method calls in PedalboardScanner
- [ ] Ensure proper plugin loading with correct pedalboard API

## Medium Priority

### Async Support
- [ ] Create async versions of scanner classes
- [ ] Implement concurrent plugin scanning
- [ ] Add async file I/O operations
- [ ] Update CLI to support async operations

### Progress Callbacks
- [ ] Define progress callback protocol
- [ ] Add progress support to scanner classes
- [ ] Integrate tqdm for CLI progress
- [ ] Add cancellation support

### Caching
- [ ] Implement cache versioning
- [ ] Add cache validation on load
- [ ] Support incremental cache updates
- [ ] Add cache management CLI commands

### Error Handling
- [ ] Create custom exception classes
- [ ] Add proper error handling in scanners
- [ ] Implement retry logic for failures
- [ ] Improve error messages

## Low Priority

### Documentation
- [ ] Update README with new features
- [ ] Add API documentation
- [ ] Create usage examples
- [ ] Document configuration options

### Build and CI
- [ ] Set up GitHub Actions workflow
- [ ] Configure codecov integration
- [ ] Add pre-commit hooks
- [ ] Update build.sh script

### Testing
- [ ] Increase test coverage to 90%+
- [ ] Add integration tests
- [ ] Add performance benchmarks
- [ ] Test on Windows platform

## Future Enhancements
- [ ] Add plugin preset management
- [ ] Support for CLAP plugins
- [ ] Plugin categorization and tagging
- [ ] Export to different formats (CSV, etc.)
- [ ] Web UI for plugin management

## Notes
- Maintain backward compatibility
- Focus on reliability over features
- Keep dependencies minimal
- Ensure cross-platform compatibility
</file>

<file path="src/pedalboard_pluginary/scanners/au_scanner.py">
"""
Handles scanning of Audio Unit (AU) plugins on macOS.
"""

import logging
import platform
import re
import subprocess
from pathlib import Path
from typing import Any, Dict, List, Optional, Set
from urllib.parse import unquote, urlparse

import pedalboard  # type: ignore[import-untyped]

from ..models import PluginInfo, PluginParameter
from ..utils import from_pb_param

logger = logging.getLogger(__name__)


class AUScanner:
    """Scanner for Audio Unit plugins."""

    def __init__(
        self,
        ignore_paths: Optional[List[str]] = None,
        specific_paths: Optional[List[str]] = None,
    ):
        """Initialize the AU scanner with optional ignore paths and specific paths."""
        self.ignore_paths = ignore_paths or []
        self.specific_paths = specific_paths or []
        self._platform_check()

    def _platform_check(self) -> None:
        """Check if running on macOS."""
        if platform.system() != "Darwin":
            logger.info("AU scanning is only applicable on macOS.")
            return

    def _list_aufx_plugins_raw(self) -> List[str]:
        """List all Audio Unit effects plugins using auval."""
        try:
            result = subprocess.run(
                ["auval", "-a"], capture_output=True, text=True, check=True
            )
            return result.stdout.splitlines()
        except (subprocess.CalledProcessError, FileNotFoundError):
            logger.warning("Failed to run auval command.")
            return []

    def _parse_aufx_path_from_auval(self, plugin_str: str) -> Optional[Path]:
        """Parse the AU plugin path from auval output."""
        parts = plugin_str.strip().split()
        if len(parts) >= 3 and parts[0] == "aufx":
            bundle_id = parts[2]
            
            # Common AU plugin locations
            locations = [
                Path("/Library/Audio/Plug-Ins/Components"),
                Path("~/Library/Audio/Plug-Ins/Components").expanduser(),
                Path("/System/Library/Components"),
            ]
            
            for location in locations:
                if location.exists():
                    for component in location.glob("*.component"):
                        if bundle_id in str(component):
                            return component
            
            # Try to find by exact name match
            for location in locations:
                if location.exists():
                    component_path = location / f"{bundle_id}.component"
                    if component_path.exists():
                        return component_path
        
        return None

    def find_plugin_files(self, plugin_paths: Optional[List[Path]] = None) -> List[Path]:
        """Find all AU plugin files."""
        if platform.system() != "Darwin":
            return []

        if plugin_paths:
            # Filter specific paths to only AU component files
            return [p for p in plugin_paths if p.suffix == ".component" and p.exists()]

        discovered_plugins = []
        auval_output = self._list_aufx_plugins_raw()
        
        for line in auval_output:
            if line.strip().startswith("aufx"):
                plugin_path = self._parse_aufx_path_from_auval(line)
                if plugin_path and self._should_include_path(plugin_path):
                    discovered_plugins.append(plugin_path)

        logger.info(f"Found {len(discovered_plugins)} AU plugins to consider.")
        return discovered_plugins

    def scan_plugin(self, plugin_path: Path) -> Optional[PluginInfo]:
        """Scan an AU plugin and return its information."""
        if not plugin_path.exists() or plugin_path.suffix != ".component":
            return None

        try:
            # Try to load the plugin using pedalboard
            plugin = pedalboard.load_plugin(str(plugin_path))  # type: ignore[attr-defined]
            
            # Extract parameters
            params: Dict[str, PluginParameter] = {}
            if hasattr(plugin, 'parameters'):
                for param_name, param_value in plugin.parameters.items():
                    # Convert the parameter value to our expected type
                    converted_value = from_pb_param(param_value)
                    params[param_name] = PluginParameter(
                        name=param_name,
                        value=converted_value,
                    )
            
            # Try to get manufacturer info
            manufacturer = None
            if hasattr(plugin, 'manufacturer'):
                manufacturer = str(plugin.manufacturer)
            
            # Get the plugin's display name
            display_name = plugin_path.stem
            if hasattr(plugin, 'name'):
                display_name = str(plugin.name)
            
            return PluginInfo(
                id=f"aufx/{plugin_path.stem}",
                name=display_name,
                path=str(plugin_path),
                filename=plugin_path.name,
                plugin_type="aufx",
                parameters=params,
                manufacturer=manufacturer,
            )

        except Exception as e:
            logger.error(f"Failed to scan AU plugin {plugin_path}: {e}")
            # Fall back to basic info extraction from auval
            try:
                result = subprocess.run(
                    ["auval", "-v", str(plugin_path)],
                    capture_output=True,
                    text=True,
                    timeout=10,
                )
                
                # Parse basic info from auval output
                name = plugin_path.stem
                manufacturer = None
                
                for line in result.stdout.splitlines():
                    if "NAME:" in line:
                        name = line.split("NAME:", 1)[1].strip()
                    elif "MANUFACTURER:" in line:
                        manufacturer = line.split("MANUFACTURER:", 1)[1].strip()
                
                if name:
                    return PluginInfo(
                        id=f"aufx/{plugin_path.stem}",
                        name=name,
                        path=str(plugin_path),
                        filename=plugin_path.name,
                        plugin_type="aufx",
                        manufacturer=manufacturer,
                    )
            except (subprocess.CalledProcessError, subprocess.TimeoutExpired, FileNotFoundError):
                pass

        return None

    def _should_include_path(self, bundle_path: Path) -> bool:
        """Determine if a bundle path should be included based on ignore and specific paths."""
        return not any(
            re.match(pattern, str(bundle_path)) for pattern in self.ignore_paths
        ) and (not self.specific_paths or bundle_path in self.specific_paths)
</file>

<file path="src/pedalboard_pluginary/scanners/vst3_scanner.py">
"""
Handles scanning of VST3 plugins.
"""

import itertools
import logging
import os
import platform
import re
from pathlib import Path
from typing import Any, Dict, List, Optional, Set

import pedalboard  # type: ignore[import-untyped]

from ..models import PluginInfo, PluginParameter
from ..utils import from_pb_param

logger = logging.getLogger(__name__)


class VST3Scanner:
    """Scans VST3 plugins."""

    def __init__(
        self,
        ignore_paths: Optional[List[str]] = None,
        specific_paths: Optional[List[str]] = None,
    ):
        """Initialize the VST3 scanner with optional ignore paths and specific paths."""
        self.ignore_paths = ignore_paths or []
        self.specific_paths = specific_paths or []

    def _get_default_vst3_folders(self) -> List[Path]:
        """Gets standard VST3 plugin folders for the current OS."""
        os_name: str = platform.system()
        folders: List[Path] = []

        program_files = os.getenv("ProgramFiles", "C:\\Program Files")
        program_files_x86 = os.getenv("ProgramFiles(x86)", "C:\\Program Files (x86)")

        if os_name == "Windows":
            folders = [
                Path(program_files) / "Common Files" / "VST3",
                Path(program_files_x86) / "Common Files" / "VST3",
            ]
        elif os_name == "Darwin":  # macOS
            folders = [
                Path("~/Library/Audio/Plug-Ins/VST3").expanduser(),
                Path("/Library/Audio/Plug-Ins/VST3"),
            ]
        elif os_name == "Linux":
            # Standard VST3 paths on Linux
            # See: https://steinbergmedia.github.io/vst3_dev_portal/pages/Technical+Documentation/Locations+Format/Plugin+Locations.html
            folders = [
                Path("~/.vst3").expanduser(),  # User specific
                Path("/usr/lib/vst3"),  # System wide
                Path("/usr/local/lib/vst3"),  # Locally installed system wide
            ]

        return [f for f in folders if f.exists()]

    def find_plugin_files(
        self,
        extra_folders: Optional[List[str]] = None,
        plugin_paths: Optional[List[Path]] = None,
    ) -> List[Path]:
        """Find all VST3 plugin files in standard and custom folders."""
        plugin_type = "vst3"

        all_folders_to_search: List[Path] = self._get_default_vst3_folders()
        
        if extra_folders:
            all_folders_to_search.extend([Path(folder) for folder in extra_folders])
        
        if plugin_paths:
            # Filter specific paths to only VST3 files
            return [p for p in plugin_paths if p.suffix == ".vst3" and p.exists()]

        if not all_folders_to_search:
            logger.warning("No VST3 folders to search.")
            return []

        logger.info(f"Searching for VST3 plugins in: {all_folders_to_search}")

        # Using set to avoid adding same path multiple times if folders overlap or symlinked
        discovered_plugin_path_set = set()
        for folder in all_folders_to_search:
            for item in folder.glob(f"*.{plugin_type}"):
                if item.is_file() and self._should_include_path(item):
                    discovered_plugin_path_set.add(item.resolve())

        vst3_plugin_files = sorted(list(discovered_plugin_path_set))
        logger.info(f"Found {len(vst3_plugin_files)} VST3 plugin files to consider.")
        return vst3_plugin_files

    def scan_plugin(self, plugin_path: Path) -> Optional[PluginInfo]:
        """Scan a VST3 plugin and return its information."""
        if not plugin_path.exists() or plugin_path.suffix != ".vst3":
            return None

        try:
            # Load the plugin to get its parameters
            plugin = pedalboard.load_plugin(str(plugin_path))  # type: ignore[attr-defined]
            
            # Extract parameters
            params: Dict[str, PluginParameter] = {}
            if hasattr(plugin, 'parameters'):
                for param_name, param_value in plugin.parameters.items():
                    # Convert the parameter value to our expected type
                    converted_value = from_pb_param(param_value)
                    params[param_name] = PluginParameter(
                        name=param_name,
                        value=converted_value,
                    )
            
            # Try to get manufacturer info if available
            manufacturer = None
            if hasattr(plugin, 'manufacturer'):
                manufacturer = str(plugin.manufacturer)
            
            # Get the plugin's display name if available
            display_name = plugin_path.stem
            if hasattr(plugin, 'name'):
                display_name = str(plugin.name)
            
            return PluginInfo(
                id=f"vst3/{plugin_path.stem}",
                name=display_name,
                path=str(plugin_path),
                filename=plugin_path.name,
                plugin_type="vst3",
                parameters=params,
                manufacturer=manufacturer,
            )
        except Exception as e:
            logger.error(f"Error scanning VST3 plugin {plugin_path}: {e}")
            return None

    def _should_include_path(self, plugin_path: Path) -> bool:
        """Determine if a plugin path should be included based on ignore and specific paths."""
        return not any(
            re.match(pattern, str(plugin_path)) for pattern in self.ignore_paths
        ) and (not self.specific_paths or plugin_path in self.specific_paths)
</file>

<file path="tests/scanners/test_vst3_scanner.py">
# tests/scanners/test_vst3_scanner.py
import os
import platform
from pathlib import Path
from unittest.mock import MagicMock, mock_open, patch

import pytest

from pedalboard_pluginary.scanners.vst3_scanner import VST3Scanner


# Helper to create dummy VST3 files and folders
def create_dummy_vst3_structure(tmp_path, structure):
    """
    Creates a dummy VST3 plugin directory structure.
    structure is a dict like:
    {
        "folder_name": ["plugin1.vst3", "plugin2.vst3", {"subfolder": ["plugin3.vst3"]}]
    }
    """
    for name, contents in structure.items():
        current_path = tmp_path / name
        current_path.mkdir(parents=True, exist_ok=True)
        for item in contents:
            if isinstance(item, str):  # It's a file
                (current_path / item).touch()
            elif isinstance(item, dict):  # It's a sub-structure
                create_dummy_vst3_structure(current_path, item)


@pytest.fixture
def vst3_scanner_instance():
    return VST3Scanner()


@pytest.fixture
def vst3_scanner_with_ignores_instance():
    return VST3Scanner(ignore_paths=["vst3/IgnoredPlugin"])


class TestVST3Scanner:
    @patch("platform.system", return_value="Windows")
    @patch.dict(
        os.environ,
        {
            "ProgramFiles": "C:\\Program Files",
            "ProgramFiles(x86)": "C:\\Program Files (x86)",
        },
    )
    def test_get_default_vst3_folders_windows(
        self, mock_platform_system, vst3_scanner_instance, tmp_path
    ):
        # Create dummy common VST3 folders for Windows
        win_vst3_path1 = tmp_path / "Program Files" / "Common Files" / "VST3"
        win_vst3_path1.mkdir(parents=True, exist_ok=True)
        win_vst3_path2 = tmp_path / "Program Files (x86)" / "Common Files" / "VST3"
        win_vst3_path2.mkdir(parents=True, exist_ok=True)

        # Patch os.getenv to return mocked ProgramFiles paths relative to tmp_path
        def mock_getenv_windows(var_name, default=None):
            if var_name == "ProgramFiles":
                return str(tmp_path / "Program Files")
            if var_name == "ProgramFiles(x86)":
                return str(tmp_path / "Program Files (x86)")
            return default

        with patch("os.getenv", side_effect=mock_getenv_windows):
            folders = vst3_scanner_instance._get_default_vst3_folders()
            assert Path(win_vst3_path1).resolve() in folders
            assert Path(win_vst3_path2).resolve() in folders

    @patch("platform.system", return_value="Darwin")
    def test_get_default_vst3_folders_macos(
        self, mock_platform_system, vst3_scanner_instance, tmp_path
    ):
        mac_vst3_path1 = tmp_path / "Library" / "Audio" / "Plug-Ins" / "VST3"  # System
        mac_vst3_path1.mkdir(parents=True, exist_ok=True)
        # User path needs to be mocked for expanduser
        user_home_vst3_path = (
            tmp_path / "Users" / "testuser" / "Library" / "Audio" / "Plug-Ins" / "VST3"
        )
        user_home_vst3_path.mkdir(parents=True, exist_ok=True)

        with (
            patch("pathlib.Path.home", return_value=tmp_path / "Users" / "testuser"),
            patch(
                "pathlib.Path.expanduser",
                side_effect=lambda p: p
                if not str(p).startswith("~")
                else user_home_vst3_path,
            ),
        ):
            # Mock /Library path to point to our tmp_path version
            original_path_init = Path.__init__

            def mocked_path_init(self, *args, **kwargs):
                if args and args[0] == "/Library/Audio/Plug-Ins/VST3":
                    args = (str(mac_vst3_path1),) + args[1:]
                original_path_init(self, *args, **kwargs)

            with patch("pathlib.Path.__init__", mocked_path_init):
                folders = vst3_scanner_instance._get_default_vst3_folders()
                assert user_home_vst3_path.resolve() in folders
                assert mac_vst3_path1.resolve() in folders

    @patch("platform.system", return_value="Linux")
    def test_get_default_vst3_folders_linux(
        self, mock_platform_system, vst3_scanner_instance, tmp_path
    ):
        linux_vst3_path1 = tmp_path / ".vst3"  # User
        linux_vst3_path1.mkdir(parents=True, exist_ok=True)
        linux_vst3_path2 = tmp_path / "usr" / "lib" / "vst3"  # System
        linux_vst3_path2.mkdir(parents=True, exist_ok=True)

        with (
            patch("pathlib.Path.home", return_value=tmp_path),
            patch(
                "pathlib.Path.expanduser",
                side_effect=lambda p: p
                if not str(p).startswith("~")
                else linux_vst3_path1,
            ),
        ):
            # Mock /usr/lib/vst3 to point to our tmp_path version
            original_path_init = Path.__init__

            def mocked_path_init(self, *args, **kwargs):
                if args and args[0] == "/usr/lib/vst3":
                    args = (str(linux_vst3_path2),) + args[1:]
                elif (
                    args and args[0] == "/usr/local/lib/vst3"
                ):  # Also mock this common path
                    args = (str(tmp_path / "usr" / "local" / "lib" / "vst3"),) + args[
                        1:
                    ]
                    (tmp_path / "usr" / "local" / "lib" / "vst3").mkdir(
                        parents=True, exist_ok=True
                    )

                original_path_init(self, *args, **kwargs)

            with patch("pathlib.Path.__init__", mocked_path_init):
                folders = vst3_scanner_instance._get_default_vst3_folders()
                assert linux_vst3_path1.resolve() in folders
                assert linux_vst3_path2.resolve() in folders

    def test_find_plugin_files_discovery(self, vst3_scanner_instance, tmp_path):
        # Create a dummy default folder and put some plugins in it
        default_folder = tmp_path / "DefaultVST3s"
        default_folder.mkdir()
        (default_folder / "PluginA.vst3").touch()
        (default_folder / "PluginB.vst3").touch()

        with patch.object(
            VST3Scanner, "_get_default_vst3_folders", return_value=[default_folder]
        ):
            found_plugins = vst3_scanner_instance.find_plugin_files()
            assert len(found_plugins) == 2
            assert default_folder / "PluginA.vst3" in found_plugins
            assert default_folder / "PluginB.vst3" in found_plugins

    def test_find_plugin_files_with_extra_folders(
        self, vst3_scanner_instance, tmp_path
    ):
        extra_folder1 = tmp_path / "ExtraVST3s1"
        extra_folder1.mkdir()
        (extra_folder1 / "PluginC.vst3").touch()

        extra_folder2 = tmp_path / "ExtraVST3s2"  # Non-existent

        # Mock default folders to be empty to isolate test to extra_folders
        with patch.object(VST3Scanner, "_get_default_vst3_folders", return_value=[]):
            found_plugins = vst3_scanner_instance.find_plugin_files(
                extra_folders=[str(extra_folder1), str(extra_folder2)]
            )
            assert len(found_plugins) == 1
            assert extra_folder1 / "PluginC.vst3" in found_plugins

    def test_find_plugin_files_with_specific_paths(
        self, vst3_scanner_instance, tmp_path
    ):
        plugin_path1 = tmp_path / "SpecificPlugin1.vst3"
        plugin_path1.touch()
        plugin_path2 = tmp_path / "SpecificPlugin2.vst3"  # Non-existent for this call

        found_plugins = vst3_scanner_instance.find_plugin_files(
            plugin_paths=[plugin_path1, plugin_path2]
        )
        assert len(found_plugins) == 1
        assert (
            plugin_path1 in found_plugins
        )  # plugin_path2 should not be found as it doesn't exist yet

    def test_find_plugin_files_with_ignores(
        self, vst3_scanner_with_ignores_instance, tmp_path
    ):
        default_folder = tmp_path / "VST3WithIgnores"
        default_folder.mkdir()
        (default_folder / "NormalPlugin.vst3").touch()
        (
            default_folder / "IgnoredPlugin.vst3"
        ).touch()  # This one has stem "IgnoredPlugin"

        with patch.object(
            VST3Scanner, "_get_default_vst3_folders", return_value=[default_folder]
        ):
            found_plugins = vst3_scanner_with_ignores_instance.find_plugin_files()
            assert len(found_plugins) == 1
            assert default_folder / "NormalPlugin.vst3" in found_plugins
            assert default_folder / "IgnoredPlugin.vst3" not in found_plugins

    def test_find_plugin_files_no_folders_exist(self, vst3_scanner_instance):
        with patch.object(VST3Scanner, "_get_default_vst3_folders", return_value=[]):
            found_plugins = vst3_scanner_instance.find_plugin_files()
            assert len(found_plugins) == 0

    def test_find_plugin_files_skips_directories_with_vst3_suffix(
        self, vst3_scanner_instance, tmp_path
    ):
        default_folder = tmp_path / "VST3WithDirs"
        default_folder.mkdir()
        (default_folder / "RealPlugin.vst3").touch()
        (default_folder / "FakePlugin.vst3").mkdir()  # A directory named like a plugin

        with patch.object(
            VST3Scanner, "_get_default_vst3_folders", return_value=[default_folder]
        ):
            found_plugins = vst3_scanner_instance.find_plugin_files()
            assert len(found_plugins) == 1
            assert default_folder / "RealPlugin.vst3" in found_plugins
            assert default_folder / "FakePlugin.vst3" not in found_plugins


# TODO: Test case where a plugin_path provided to find_plugin_files is a directory (should be ignored)
# TODO: Test case with symlinks if relevant (Path.resolve() should handle them, but good to be aware)
# TODO: Test case for duplicate plugin paths from overlapping folder definitions (should be unique)
#       (find_plugin_files uses a set internally for discovery before sorting, so this should be handled)
</file>

<file path="tests/test_data.py">
import os
from pedalboard_pluginary.data import get_cache_path
from unittest.mock import patch

def test_get_cache_path_windows():
    with patch.dict(os.environ, {"APPDATA": "C:\\Users\\TestUser\\AppData"}):
        path = get_cache_path("test_cache")
        assert str(path) == "C:\\Users\\TestUser\\AppData\\com.twardoch.pedalboard-pluginary\\test_cache.json"

@patch('platform.system', return_value='Darwin')
def test_get_cache_path_macos(mock_platform_system):
    # Test for macOS when APPDATA is not set (should not be used)
    # and XDG_CACHE_HOME is not set (should not be used)
    with patch.dict(os.environ, {}, clear=True):
        path = get_cache_path("test_cache")
        home = os.path.expanduser("~")
        expected_path = f"{home}/Library/Application Support/com.twardoch.pedalboard-pluginary/test_cache.json"
        assert str(path) == expected_path

@patch('platform.system', return_value='Linux')
def test_get_cache_path_linux_xdg_set(mock_platform_system):
    xdg_cache_dir = "/custom/xdg/cache"
    with patch.dict(os.environ, {"XDG_CACHE_HOME": xdg_cache_dir}, clear=True):
        path = get_cache_path("test_cache")
        expected_path = f"{xdg_cache_dir}/com.twardoch.pedalboard-pluginary/test_cache.json"
        assert str(path) == expected_path

@patch('platform.system', return_value='Linux')
def test_get_cache_path_linux_xdg_not_set(mock_platform_system):
    # Test when XDG_CACHE_HOME is not set
    with patch.dict(os.environ, {}, clear=True): # Ensure XDG_CACHE_HOME is not set
        path = get_cache_path("test_cache")
        home = os.path.expanduser("~")
        expected_path = f"{home}/.cache/com.twardoch.pedalboard-pluginary/test_cache.json"
        assert str(path) == expected_path
</file>

<file path=".gitignore">
temp/

# Temporary and binary files
*~
*.py[cod]
*.so
*.cfg
!.isort.cfg
!setup.cfg
*.orig
*.log
*.pot
__pycache__/*
.cache/*
.*.swp
*/.ipynb_checkpoints/*
.DS_Store

# Project files
.ropeproject
.project
.pydevproject
.settings
.idea
.vscode
tags

# Package files
*.egg
*.eggs/
.installed.cfg
*.egg-info

# Unittest and coverage
htmlcov/*
.coverage
.coverage.*
.tox
junit*.xml
coverage.xml
.pytest_cache/

# Build and docs folder/files
build/*
dist/*
sdist/*
docs/api/*
docs/_rst/*
docs/_build/*
cover/*
MANIFEST

# Per-project virtualenvs
.venv*/
.conda*/
.python-version
</file>

<file path=".pre-commit-config.yaml">
exclude: '^docs/conf.py'

repos:
- repo: https://github.com/pre-commit/pre-commit-hooks
  rev: v4.5.0
  hooks:
  - id: trailing-whitespace
  - id: check-added-large-files
  - id: check-ast
  - id: check-json
  - id: check-merge-conflict
  - id: check-xml
  - id: check-yaml
  - id: debug-statements
  - id: end-of-file-fixer
  - id: requirements-txt-fixer
  - id: mixed-line-ending
    args: ['--fix=auto']  # replace 'auto' with 'lf' to enforce Linux/Mac line endings or 'crlf' for Windows

## If you want to automatically "modernize" your Python code:
# - repo: https://github.com/asottile/pyupgrade
#   rev: v3.7.0
#   hooks:
#   - id: pyupgrade
#     args: ['--py37-plus']

## If you want to avoid flake8 errors due to unused vars or imports:
# - repo: https://github.com/PyCQA/autoflake
#   rev: v2.1.1
#   hooks:
#   - id: autoflake
#     args: [
#       --in-place,
#       --remove-all-unused-imports,
#       --remove-unused-variables,
#     ]

- repo: https://github.com/PyCQA/isort
  rev: 5.12.0
  hooks:
  - id: isort

- repo: https://github.com/psf/black
  rev: 23.11.0
  hooks:
  - id: black
    language_version: python3

## If like to embrace black styles even in the docs:
# - repo: https://github.com/asottile/blacken-docs
#   rev: v1.13.0
#   hooks:
#   - id: blacken-docs
#     additional_dependencies: [black]

- repo: https://github.com/PyCQA/flake8
  rev: 6.1.0
  hooks:
  - id: flake8
  ## You can add flake8 plugins via `additional_dependencies`:
  #  additional_dependencies: [flake8-bugbear]

- repo: https://github.com/pre-commit/mirrors-mypy
  rev: v1.7.0 # Or choose the latest version
  hooks:
  - id: mypy
    # You might need to specify `additional_dependencies` for mypy to find your project's dependencies
    # e.g., additional_dependencies: [types-setuptools, types-requests]
    # For this project:
    additional_dependencies: [
      types-setuptools, # For pkg_resources, etc.
      # Add stubs for other dependencies if mypy complains and they exist
      # types-fire, types-tqdm, types-python-benedict might not exist or be mature.
      # For now, we'll rely on inline # type: ignore for problematic libs
      # and the mypy config in pyproject.toml for global settings.
      "pedalboard", # To make mypy aware of pedalboard, even if it has no stubs
      "fire",
      "tqdm",
      "python-benedict"
    ]
    # It's good practice to also configure mypy via pyproject.toml or mypy.ini
    # For example, to specify the Python version, follow imports, etc.
    args: [--config-file=pyproject.toml] # Point to pyproject.toml for config

## Check for misspells in documentation files:
# - repo: https://github.com/codespell-project/codespell
#   rev: v2.2.5
#   hooks:
#   - id: codespell
</file>

<file path="AUTHORS.md">
# Contributors

* Adam Twardoch <adam+github@twardoch.com>
</file>

<file path="tox.ini">
# Tox configuration file
# Read more under https://tox.wiki/
# THIS SCRIPT IS SUPPOSED TO BE AN EXAMPLE. MODIFY IT ACCORDING TO YOUR NEEDS!

[tox]
minversion = 3.24
envlist = default
isolated_build = True

[testenv]
description = Invoke pytest to run automated tests
setenv =
    TOXINIDIR = {toxinidir}
passenv =
    HOME
    SETUPTOOLS_*
extras =
    testing
commands =
    pytest {posargs}

# To run `tox -e lint` you need to make sure you have a
# `.pre-commit-config.yaml` file. See https://pre-commit.com
# [testenv:lint]
# description = Perform static analysis and style checks
# skip_install = True
# deps = pre-commit
# passenv =
#     HOMEPATH
#     PROGRAMDATA
#     SETUPTOOLS_*
# commands =
#     pre-commit run --all-files {posargs:--show-diff-on-failure}

[testenv:{build,clean}]
description =
    build: Build the package in isolation according to PEP517, see https://github.com/pypa/build
    clean: Remove old distribution files and temporary build artifacts (./build and ./dist)
skip_install = True
changedir = {toxinidir}
deps =
    build: build[virtualenv]
passenv =
    SETUPTOOLS_*
commands =
    clean: python -c 'import shutil; [shutil.rmtree(p, True) for p in ("build", "dist")]'
    clean: python -c 'import pathlib, shutil; [shutil.rmtree(p, True) for p in pathlib.Path("src").glob("*.egg-info")]'
    build: python -m build {posargs}

[testenv:publish]
description =
    Publish the package you have been developing to a package index server.
    By default, it uses testpypi. If you really want to publish your package
    to be publicly accessible in PyPI, use the `-- --repository pypi` option.
skip_install = True
changedir = {toxinidir}
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    TWINE_REPOSITORY
    TWINE_REPOSITORY_URL
deps = twine
commands =
    python -m twine check dist/*
    python -m twine upload {posargs:--repository {env:TWINE_REPOSITORY:testpypi}} dist/*
</file>

<file path=".github/workflows/ci.yml">
name: Python package CI

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fire pytest pytest-cov # Added pytest-cov for coverage
    - name: Run tests with coverage
      run: |
        python -m pip install -e .
        # Pytest is configured in pyproject.toml to run with --cov
        # and output to term-missing. It also creates .coverage file.
        pytest
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        # token: ${{ secrets.CODECOV_TOKEN }} # Only if needed for private repos or specific cases
        fail_ci_if_error: true # Optional: fail CI if coverage upload fails

  publish:
    needs: build-and-test
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Build and publish
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        python -m pip install --upgrade build twine
        python -m build
        twine upload dist/*
</file>

<file path="src/pedalboard_pluginary/__init__.py">
from importlib.metadata import PackageNotFoundError, version

try:
    # Change here if project is renamed and does not equal the package name
    dist_name = __name__
    __version__ = version(dist_name)
except PackageNotFoundError:  # pragma: no cover
    __version__ = "unknown"
finally:
    del version, PackageNotFoundError

from .core import PedalboardPluginary
</file>

<file path="src/pedalboard_pluginary/core.py">
import json
from pathlib import Path
from typing import Any, Dict

from .data import get_cache_path, load_json_file
from .scanner import PedalboardScanner


class PedalboardPluginary:
    plugins_path: Path
    plugins: Dict[str, Any]  # Assuming plugin names (keys) are strings

    def __init__(self) -> None:
        self.plugins_path = get_cache_path("plugins")
        self.plugins = {}  # Initialize to empty dict
        self.load_data()

    def load_data(self) -> None:
        if not self.plugins_path.exists():
            scanner = PedalboardScanner()
            scanner.full_scan()  # Updated to use full_scan instead of scan

        # Ensure plugins are loaded even if scan wasn't needed or if it just ran
        # load_json_file returns Dict[Any, Any], but we expect Dict[str, Any] for plugins
        loaded_plugins = load_json_file(self.plugins_path)
        if isinstance(loaded_plugins, dict):
            self.plugins = loaded_plugins
        else:
            # This case should ideally not happen if save_json_file and load_json_file are robust
            self.plugins = {}

    def list_plugins(self) -> str:
        """Returns a JSON string representation of the plugins."""
        return json.dumps(self.plugins, indent=4)
</file>

<file path="src/pedalboard_pluginary/data.py">
import json
import os
import platform  # Added
import shutil
from importlib import resources
from pathlib import Path
from typing import Any, Dict, List, Optional, Set, Union

from .models import PluginInfo, PluginParameter  # Added

# pkg_resources import removed, will rely on importlib.resources primarily.
# Fallback block for pkg_resources in copy_default_ignores will try to use it
# and handle NameError if it's not available.
from .utils import ensure_folder

APP_NAME: str = "com.twardoch.pedalboard-pluginary"
PLUGINS_CACHE_FILENAME_BASE: str = "plugins"  # To identify the plugins cache file


def get_cache_path(cache_name: str) -> Path:
    """Get the path to a cache file."""
    os_name = platform.system()
    if os_name == "Windows":
        app_data_env = os.getenv("APPDATA")
        if app_data_env is None:
            app_data_dir = (
                Path(os.path.expanduser("~")) / "AppData" / "Roaming" / APP_NAME
            )
        else:
            app_data_dir = Path(app_data_env) / APP_NAME
    elif os_name == "Darwin":  # macOS
        app_data_dir = Path.home() / "Library" / "Application Support" / APP_NAME
    else:  # Linux and other Unix-like systems
        xdg_cache_home_env = os.getenv("XDG_CACHE_HOME")
        if xdg_cache_home_env:
            app_data_dir = Path(xdg_cache_home_env) / APP_NAME
        else:
            app_data_dir = Path.home() / ".cache" / APP_NAME

    app_data_dir.mkdir(parents=True, exist_ok=True)  # Ensure base app dir exists
    return app_data_dir / f"{cache_name}.json"


def load_json_file(file_path: Path) -> Dict[str, Any]:
    """Load JSON data from a file. If it's the plugins cache, reconstruct PluginInfo objects."""
    if not file_path.exists():
        return {}

    with open(file_path, "r", encoding="utf-8") as file:
        try:
            raw_data = json.load(file)
        except json.JSONDecodeError:
            return {}  # Return empty dict if JSON is corrupted

    # Check if this is the plugins cache file by its name
    if file_path.name == f"{PLUGINS_CACHE_FILENAME_BASE}.json":
        if not isinstance(raw_data, dict):
            return {}  # Corrupted plugin cache

        reconstructed_plugins: Dict[str, PluginInfo] = {}
        for plugin_id, plugin_data_dict in raw_data.items():
            if not isinstance(plugin_data_dict, dict):
                continue  # Skip malformed entries

            param_dicts = plugin_data_dict.get("parameters", {})
            reconstructed_params: Dict[str, PluginParameter] = {}
            if isinstance(param_dicts, dict):
                for param_name, param_data_dict in param_dicts.items():
                    if isinstance(param_data_dict, dict):
                        try:
                            reconstructed_params[param_name] = PluginParameter(
                                name=str(param_data_dict.get("name", param_name)),
                                value=param_data_dict.get("value", 0.0),
                            )
                        except TypeError as e:
                            print(
                                f"Warning: Could not reconstruct parameter {param_name} for {plugin_id}: {e}"
                            )
                            continue

            try:
                reconstructed_plugins[plugin_id] = PluginInfo(
                    id=plugin_data_dict.get("id", plugin_id),
                    name=plugin_data_dict.get("name", "Unknown Plugin Name"),
                    path=plugin_data_dict.get("path", ""),
                    filename=plugin_data_dict.get("filename", ""),
                    plugin_type=plugin_data_dict.get("plugin_type", "unknown"),
                    parameters=reconstructed_params,
                    manufacturer=plugin_data_dict.get("manufacturer"),
                    name_in_file=plugin_data_dict.get("name_in_file"),
                )
            except TypeError as e:
                print(
                    f"Warning: Could not reconstruct plugin info for {plugin_id}: {e}"
                )
                continue

        return reconstructed_plugins

    # Handle non-plugin cache files
    result: Dict[str, Any] = {}
    if isinstance(raw_data, dict):
        result = {str(k): v for k, v in raw_data.items()}
    elif isinstance(raw_data, list):
        result = {str(i): item for i, item in enumerate(raw_data)}
    return result


def save_json_file(data: Union[Dict[Any, Any], List[Any]], file_path: Path) -> None:
    """Save JSON data to a file."""
    ensure_folder(file_path)
    with open(file_path, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4)


def load_ignores(ignores_path: Path) -> Set[str]:
    """Load ignores data (list of strings) from the file."""
    content = load_json_file(ignores_path)
    if isinstance(content, list):  # Expects a list of strings
        return set(item for item in content if isinstance(item, str))
    return set()


def save_ignores(ignores: Set[str], ignores_path: Path) -> None:
    """Save ignores data to the file."""
    save_json_file(sorted(list(ignores)), ignores_path)


def copy_default_ignores(destination_path: Path) -> None:
    """Copy the default ignores file to the destination if it does not exist."""
    try:
        import importlib.resources

        default_ignores_src_path = importlib.resources.files(
            "pedalboard_pluginary.resources"
        ).joinpath("default_ignores.json")

        if not destination_path.exists():
            ensure_folder(destination_path)
            with importlib.resources.as_file(
                default_ignores_src_path
            ) as src_file_on_fs:
                if src_file_on_fs.exists():
                    shutil.copy(src_file_on_fs, destination_path)
                else:
                    save_json_file([], destination_path)
    except (ImportError, FileNotFoundError, TypeError) as e:
        print(
            f"Warning: Could not copy default ignores using importlib.resources: {e}. Creating empty ignores file."
        )
        if not destination_path.exists():
            ensure_folder(destination_path)
            save_json_file([], destination_path)
</file>

<file path="src/pedalboard_pluginary/utils.py">
from pathlib import Path
from typing import Any, Union

def ensure_folder(path: Path) -> None:
    """ Ensure that a folder exists. """
    path.parent.mkdir(parents=True, exist_ok=True)

def from_pb_param(data: Any) -> Union[float, bool, str]:
    """
    Converts a pedalboard parameter value to a Python native type.
    Pedalboard parameter values can be string representations of floats, booleans, or just strings.
    """
    drep = str(data)
    try:
        return float(drep)
    except ValueError:
        pass
    if drep.lower() == "true":
        return True
    if drep.lower() == "false":
        return False
    return drep
</file>

<file path="pyproject.toml">
[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.setuptools_scm]
version_scheme = "no-guess-dev"

[project]
name = "pedalboard-pluginary"
version = "0.1.0"
description = "A plugin scanner for Pedalboard"
readme = "README.md"
requires-python = ">=3.9"
license = { text = "Apache-2.0" }
authors = [
    { name = "Adam Twardoch", email = "adam@twardoch.com" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "pedalboard>=0.8.7",
    "fire>=0.5.0",
    "python-benedict>=0.33.0",
    "pyyaml>=6.0.1",
]

[project.urls]
Documentation = "https://github.com/twardoch/pedalboard-pluginary#readme"
Source = "https://github.com/twardoch/pedalboard-pluginary"
Tracker = "https://github.com/twardoch/pedalboard-pluginary/issues"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.4",
    "pytest-cov>=4.1.0",
    "mypy>=1.8.0",
    "flake8>=7.0.0",
    "black>=24.1.1",
    "isort>=5.13.2",
]

[project.scripts]
pbpluginary = "pedalboard_pluginary.__main__:main"

[tool.setuptools]
packages = ["pedalboard_pluginary"]
package-dir = {"" = "src"}

[tool.pytest.ini_options]
addopts = "--cov=pedalboard_pluginary --cov-report=term-missing"
testpaths = ["tests"]

[tool.flake8]
max_line_length = 88
extend_ignore = "E203,W503"
exclude = [
    ".tox",
    "build",
    "dist",
    ".eggs",
    "docs/conf.py",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
</file>

<file path="src/pedalboard_pluginary/__main__.py">
#!/usr/bin/env python3
# benedict might also lack stubs.
import json
import logging  # For basicConfig
import sys  # For sys.stdout in Display lambda
from pathlib import Path
from typing import Any, Callable, Dict, List, Optional

import fire
import yaml  # type: ignore[import-not-found]

# fire library might not have complete type stubs, common to ignore if problematic for mypy.
# Consider adding types-fire if available and it resolves issues.
from benedict import benedict as bdict  # type: ignore[import-untyped]

from .core import PedalboardPluginary
from .data import (
    PLUGINS_CACHE_FILENAME_BASE,
    get_cache_path,
    load_json_file,
    save_json_file,
)
from .models import PluginInfo
from .scanner import PedalboardScanner

# Define a more specific type for extra_folders if it's always List[str] after split
ExtraFoldersType = Optional[List[str]]


def setup_logging(verbose_level: int = 0) -> None:
    """Configures basic logging for CLI output."""
    # verbose_level: 0 = WARNING, 1 = INFO, 2 = DEBUG
    log_level = logging.WARNING
    if verbose_level == 1:
        log_level = logging.INFO
    elif verbose_level >= 2:
        log_level = logging.DEBUG

    # Only configure if no handlers are already set (e.g., by tests or other imports)
    # This basicConfig will go to stderr by default for WARNING and above.
    # For INFO, let's direct to stdout for better CLI experience.
    if not logging.getLogger().hasHandlers():
        if log_level <= logging.INFO:
            # For INFO and DEBUG, use a more verbose format and stdout
            logging.basicConfig(
                stream=sys.stdout,
                level=log_level,
                format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            )
        else:
            # For WARNING, ERROR, CRITICAL, use stderr and simpler format
            logging.basicConfig(
                level=log_level, format="%(levelname)s: %(name)s: %(message)s"
            )


def scan_plugins_cli(extra_folders: Optional[str] = None, verbose: int = 0) -> None:
    """Scans all plugins, optionally including extra folders (comma-separated string)."""
    folders_list: List[str] = extra_folders.split(",") if extra_folders else []
    scanner = PedalboardScanner(specific_paths=folders_list)
    scanner.full_scan()  # This updates scanner.plugins
    if scanner.plugins:  # Only save if we found plugins
        cache_file = get_cache_path(PLUGINS_CACHE_FILENAME_BASE)
        save_json_file(scanner.plugins, cache_file)


def update_plugins_cli(extra_folders: Optional[str] = None, verbose: int = 0) -> None:
    """Updates the plugin cache, optionally including extra folders (comma-separated string)."""
    scan_plugins_cli(extra_folders, verbose)


def list_json_cli() -> Dict:
    """Lists all plugins in JSON format."""
    cache_file = get_cache_path(PLUGINS_CACHE_FILENAME_BASE)
    if not cache_file.exists():
        return {}
    return load_json_file(cache_file)


def list_yaml_cli() -> str:
    """Lists all plugins in YAML format."""
    plugins = list_json_cli()
    return yaml.dump(plugins, sort_keys=False, indent=2)


def main():
    """Main entry point for the CLI."""
    fire.Fire({
        "scan": scan_plugins_cli,
        "list": list_json_cli,
        "json": list_json_cli,
        "yaml": list_yaml_cli,
        "update": update_plugins_cli,
    })


if __name__ == "__main__":
    main()
</file>

<file path="src/pedalboard_pluginary/scanner.py">
import json
import logging
from pathlib import Path
from typing import Any, Dict, List, Optional

import pedalboard  # type: ignore[import-untyped]
from tqdm import tqdm  # type: ignore[import-untyped]

from .data import (
    copy_default_ignores,
    get_cache_path,
    load_ignores,
    load_json_file,
    save_json_file,
)
from .models import ParameterValue, PluginInfo, PluginParameter
from .scanners.au_scanner import AUScanner
from .scanners.vst3_scanner import VST3Scanner
from .utils import ensure_folder, from_pb_param

logger: logging.Logger = logging.getLogger(__name__)


class PedalboardScanner:
    """Main scanner class that coordinates scanning of all plugin types."""

    def __init__(
        self,
        ignore_paths: Optional[List[str]] = None,
        specific_paths: Optional[List[str]] = None,
    ):
        """Initialize the scanner with optional ignore paths and specific paths."""
        self.ignore_paths = ignore_paths or []
        self.specific_paths = specific_paths or []
        self.plugins: Dict[str, PluginInfo] = {}
        self.plugins_path = get_cache_path("plugins")
        self.ignores_path = get_cache_path("ignores")
        
        # Initialize ignores
        copy_default_ignores(self.ignores_path)
        self.ignores = load_ignores(self.ignores_path)
        
        # Initialize scanners
        self.scanners = [
            AUScanner(
                ignore_paths=self.ignore_paths, specific_paths=self.specific_paths
            ),
            VST3Scanner(
                ignore_paths=self.ignore_paths, specific_paths=self.specific_paths
            ),
        ]
        
        # Load existing plugin data if available
        self.load_data()

    def load_data(self) -> None:
        """Load existing plugin data from cache."""
        if self.plugins_path.exists():
            loaded_data = load_json_file(self.plugins_path)
            if isinstance(loaded_data, dict):
                # Convert loaded data to PluginInfo objects
                for key, plugin_data in loaded_data.items():
                    if isinstance(plugin_data, dict):
                        # Convert parameters
                        params = {}
                        if "parameters" in plugin_data:
                            for param_name, param_data in plugin_data["parameters"].items():
                                if isinstance(param_data, dict):
                                    params[param_name] = PluginParameter(
                                        name=param_data.get("name", param_name),
                                        value=param_data.get("value"),
                                    )
                        
                        self.plugins[key] = PluginInfo(
                            id=plugin_data.get("id", key),
                            name=plugin_data.get("name", ""),
                            path=plugin_data.get("path", ""),
                            filename=plugin_data.get("filename", ""),
                            plugin_type=plugin_data.get("plugin_type", ""),
                            parameters=params,
                            manufacturer=plugin_data.get("manufacturer"),
                            name_in_file=plugin_data.get("name_in_file"),
                        )

    def save_data(self) -> None:
        """Save plugin data to cache."""
        ensure_folder(self.plugins_path.parent)
        
        # Convert PluginInfo objects to dictionaries for JSON serialization
        plugins_dict = {}
        for key, plugin_info in self.plugins.items():
            plugin_dict = {
                "id": plugin_info.id,
                "name": plugin_info.name,
                "path": plugin_info.path,
                "filename": plugin_info.filename,
                "plugin_type": plugin_info.plugin_type,
                "parameters": {},
                "manufacturer": plugin_info.manufacturer,
                "name_in_file": plugin_info.name_in_file,
            }
            
            # Convert parameters
            for param_name, param in plugin_info.parameters.items():
                plugin_dict["parameters"][param_name] = {
                    "name": param.name,
                    "value": param.value,
                }
            
            plugins_dict[key] = plugin_dict
        
        save_json_file(plugins_dict, self.plugins_path)
        
        # Save updated ignores
        save_json_file(list(self.ignores), self.ignores_path)

    def full_scan(self) -> Dict[str, PluginInfo]:
        """Perform a full scan of all plugin types."""
        self.plugins = {}
        total_files = 0
        
        # First, count all plugin files
        all_plugin_files = []
        for scanner in self.scanners:
            plugin_files = scanner.find_plugin_files()
            all_plugin_files.extend([(scanner, pf) for pf in plugin_files])
            total_files += len(plugin_files)
        
        # Scan all plugins with progress bar
        with tqdm(total=total_files, desc="Scanning plugins") as pbar:
            for scanner, plugin_file in all_plugin_files:
                plugin_key = f"{scanner.__class__.__name__.replace('Scanner', '').lower()}:{plugin_file}"
                
                # Skip ignored plugins
                if plugin_key in self.ignores:
                    logger.info(f"Skipping ignored plugin: {plugin_file}")
                    pbar.update(1)
                    continue
                
                try:
                    plugin_info = scanner.scan_plugin(plugin_file)
                    if plugin_info:
                        self.plugins[plugin_info.id] = plugin_info
                        logger.info(f"Scanned plugin: {plugin_file}")
                except Exception as e:
                    logger.error(f"Failed to scan plugin {plugin_file}: {e}")
                    self.ignores.add(plugin_key)
                
                pbar.update(1)
        
        # Save the results
        self.save_data()
        return self.plugins

    def update_scan(self) -> Dict[str, PluginInfo]:
        """Update the scan with new plugins while preserving existing data."""
        # Keep track of existing plugins
        existing_plugins = set(self.plugins.keys())
        new_plugins = {}
        
        # Find all plugin files
        all_plugin_files = []
        for scanner in self.scanners:
            plugin_files = scanner.find_plugin_files()
            all_plugin_files.extend([(scanner, pf) for pf in plugin_files])
        
        # Only scan plugins that aren't already in the cache
        plugins_to_scan = []
        for scanner, plugin_file in all_plugin_files:
            plugin_type = scanner.__class__.__name__.replace('Scanner', '').lower()
            plugin_key = f"{plugin_type}:{plugin_file}"
            
            if plugin_key not in existing_plugins and plugin_key not in self.ignores:
                plugins_to_scan.append((scanner, plugin_file, plugin_key))
        
        # Scan new plugins with progress bar
        if plugins_to_scan:
            with tqdm(total=len(plugins_to_scan), desc="Scanning new plugins") as pbar:
                for scanner, plugin_file, plugin_key in plugins_to_scan:
                    try:
                        plugin_info = scanner.scan_plugin(plugin_file)
                        if plugin_info:
                            self.plugins[plugin_info.id] = plugin_info
                            new_plugins[plugin_info.id] = plugin_info
                            logger.info(f"Scanned new plugin: {plugin_file}")
                    except Exception as e:
                        logger.error(f"Failed to scan plugin {plugin_file}: {e}")
                        self.ignores.add(plugin_key)
                    
                    pbar.update(1)
            
            # Save updated data
            self.save_data()
        
        return new_plugins

    def get_json(self) -> str:
        """Return the plugins data as a JSON string."""
        # Convert to serializable format
        plugins_dict = {}
        for key, plugin_info in self.plugins.items():
            plugin_dict = {
                "id": plugin_info.id,
                "name": plugin_info.name,
                "path": plugin_info.path,
                "filename": plugin_info.filename,
                "plugin_type": plugin_info.plugin_type,
                "parameters": {},
                "manufacturer": plugin_info.manufacturer,
                "name_in_file": plugin_info.name_in_file,
            }
            
            # Convert parameters
            for param_name, param in plugin_info.parameters.items():
                plugin_dict["parameters"][param_name] = {
                    "name": param.name,
                    "value": param.value,
                }
            
            plugins_dict[key] = plugin_dict
        
        return json.dumps(plugins_dict, indent=2)
</file>

<file path="README.md">
# Pedalboard Pluginary

[![Codecov](https://codecov.io/gh/twardoch/pedalboard-pluginary/branch/main/graph/badge.svg?token=YOUR_CODECOV_TOKEN_HERE)](https://codecov.io/gh/twardoch/pedalboard-pluginary)
<!-- Replace YOUR_CODECOV_TOKEN_HERE with the actual token from Codecov if needed, or remove the token part if your repo is public and Codecov supports tokenless uploads for it.
The URL should also be verified once the repo is active on Codecov. -->

_Pedalboard Pluginary_ is an independent Python-based package and command-line tool that scans and lists VST-3 plugins on macOS and Windows, and Audio Unit (AU) plugins on macOS. It’s intended as a companion for the _[Pedalboard](https://github.com/spotify/pedalboard)_ Python library by Spotify, but it’s not affiliated with _Pedalboard_ or Spotify.

## Features

With _Pedalboard Pluginary_, you can scan and list VST-3 and AU audio plugins installed on your machine, including their default parameters. 

- It automatically scans and catalogs VST-3 and AU plugins installed on your system.
- Provides a command-line interface (CLI) for quick access to your plugin library.
- Saves the plugin information in a JSON file. This file has the information about the plugin parameters and their default values. 
- Works on Windows and macOS (Windows is currently untested).
- It bundles an `ignores.json` file, which “blacklists” some plugins that are known to cause issues with Pedalboard. It will not scan these, and will not include them in the cache. If you find that some plugins are not working with Pedalboard, you can add them to your `ignores.json` file. See “Contributing” section below.

## Future plans

I plan to extend the package with another functionality, “jobs”, which will allow to load a stack of plugins with their parameter values from a dictionary or JSON file, and run them in a batch using Pedalboard. 

## Installation

To install _Pedalboard Pluginary_, run:

```bash
python3 -m pip install --upgrade pedalboard-pluginary
```

For the current development version:

```bash
python3 -m pip install --upgrade git+https://github.com/twardoch/pedalboard-pluginary
```

## Command-line usage

After installation, you can use `pbpluginary` from the command line.

### Commands:

- `pbpluginary list` displays the plugin information stored in the cache, as a JSON. If no cache exists, it will scan your system and create the cache.
- `pbpluginary scan` scans all available plugins, and caches the information. Run this if you’ve installed or upgraded some VST-3 or AU plugins.

## Python usage

You can use _Pedalboard Pluginary_ as a library in your Python scripts. Here's a quick example:

```python
from pedalboard_pluginary import PedalboardPluginary

pluginary = PedalboardPluginary()
print(pluginary.list_plugins())
```

This snippet will list all plugins that have been scanned and cached, as a JSON.

## Changes

- **v1.1.0**: Added `update` CLI command which only scans plugins that aren’t cached yet. Not perfect. Added `json` and `yaml` CLI commands. Additional refactorings. 
- **v1.0.0**: Initial release with basic scanning and listing of both VST-3 and AU plugins, and command-line interface for easy interaction.

## License

- **Pedalboard Pluginary** is written by Adam Twardoch, with assistance from GPT-4.
- Copyright (c) 2023 Adam Twardoch.
- Licensed under the [Apache-2.0 license](https://raw.githubusercontent.com/twardoch/pedalboard-pluginary/main/LICENSE.txt).
- _Pedalboard Pluginary_ is not affiliated with [Pedalboard](https://github.com/spotify/pedalboard) or Spotify.

## Contributing

- If you encounter any issues or have suggestions, feel free to open an [issue](https://github.com/twardoch/pedalboard-pluginary/issues) on GitHub. 
- If you find that some plugins are not working with Pedalboard, open an issue that lists the key, which is the plugin type and the base filename, like `"aufx/CoreAudio"` or `"vst3/RX 10 Connect"`. You can also modify the [`default_ignores.json`](https://raw.githubusercontent.com/twardoch/pedalboard-pluginary/main/src/pedalboard_pluginary/resources/default_ignores.json) file, and submit a pull request.
- If you want to contribute code, please open a pull request.
</file>

</files>
